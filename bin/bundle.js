!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){t.exports=n(2)},function(t,e,n){"use strict";n.r(e);var r=n(0);new r.Widget({appName:"test",autoShowTime:0,position:"center",target:"#widget",network:"mainnet"}).create()},function(t,e,n){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./widget/index.ts")}({"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss ***!
  \***************************************************************************************************************/
/*! no static exports found */function(t,e,n){(t.exports=n(/*! ../../node_modules/css-loader/dist/runtime/api.js */"./node_modules/css-loader/dist/runtime/api.js")(!1)).push([t.i,'.matic-widget {\n  border: 1px solid #f1eded;\n  position: fixed;\n  transition: transform 1s;\n  background-color: #fff;\n  border-radius: 20px;\n  max-height: 90%;\n  max-width: 80%;\n  z-index: 10000; }\n  .matic-widget.matic-widget--slide-down {\n    transform: translateY(1000px);\n    border-radius: 20px; }\n  .matic-widget.matic-widget--slide-up {\n    transform: translateY(0); }\n  .matic-widget.matic-widget--hide {\n    display: none; }\n  .matic-widget .matic-widget_iframe {\n    width: 100%;\n    height: 100%;\n    border: none; }\n  .matic-widget.center {\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n    top: 0;\n    bottom: 0;\n    margin-top: auto;\n    margin-bottom: auto; }\n  .matic-widget.bottom-right {\n    bottom: 5px;\n    right: 5px; }\n  .matic-widget.bottom-left {\n    bottom: 5px;\n    left: 5px; }\n  .matic-widget.widget-overlay::before {\n    content: "";\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.2);\n    border-radius: 20px;\n    animation: 0.3s ease 1.87s forwards fade-in; }\n\n@keyframes fade-in {\n  0% {\n    border-radius: 20px; }\n  80% {\n    border-radius: 20px; }\n  100% {\n    border-radius: 0; } }\n',""])},"./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var s=t[i];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(t,e,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(t,e){return e?e.querySelector(t):document.querySelector(t)},d=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=a.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),c=null,u=0,l=[],f=n(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(w(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(w(r.parts[s],e));o[r.id]={id:r.id,refs:1,parts:a}}}}function m(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(t,e){var n=d(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=d(t.insertAt.before,n);n.insertBefore(e,i)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function w(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var s=u++;n=c||(c=g(e)),r=_.bind(null,n,s,!1),i=_.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=S.bind(null,n,e),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),r=j.bind(null,n),i=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=m(t,e);return p(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}t&&p(m(t,e),e);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var d=0;d<a.parts.length;d++)a.parts[d]();delete o[a.id]}}}};var y,x=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function j(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function S(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=f(r)),i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},"./src/enums/widget_event.ts":
/*!***********************************!*\
  !*** ./src/enums/widget_event.ts ***!
  \***********************************/
/*! exports provided: WIDGET_EVENT */function(t,e,n){"use strict";var r;n.r(e),n.d(e,"WIDGET_EVENT",(function(){return r})),function(t){t.close="close",t.burnInit="burnInit",t.burnComplete="burnComplete",t.exitInit="exitInit",t.exitError="exitError",t.exitComplete="exitComplete",t.confirmWithdrawInit="confirmWithdrawInit",t.confirmWithdrawComplete="confirmWithdrawComplete",t.confirmWithdrawError="confirmWithdrawError",t.load="load",t.approveInit="approveInit",t.approveComplete="approveComplete",t.approveError="approveError",t.depositInit="depositInit",t.depositComplete="depositComplete",t.depositError="depositError"}(r||(r={}))},"./widget/constants.ts":
/*!*****************************!*\
  !*** ./widget/constants.ts ***!
  \*****************************/
/*! exports provided: appVersion, defaultConfig */function(t,e,n){"use strict";n.r(e),n.d(e,"appVersion",(function(){return r})),n.d(e,"defaultConfig",(function(){return i}));const r="1.0.3",i={autoShowTime:-1,height:618,newTabForMobile:!1,width:540,position:"",appName:"",relativePath:"",assetsFromWidgetServer:!0,overlay:!1,style:{}}},"./widget/index.ts":
/*!*************************!*\
  !*** ./widget/index.ts ***!
  \*************************/
/*! exports provided: Widget */function(t,e,n){"use strict";n.r(e),n.d(e,"Widget",(function(){return a}));var r=n(/*! ./constants */"./widget/constants.ts"),i=n(/*! ../src/enums/widget_event */"./src/enums/widget_event.ts"),o=(n(/*! ./styles/index.scss */"./widget/styles/index.scss"),n(/*! ./utils */"./widget/utils/index.ts")),s=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{d(r.next(t))}catch(t){o(t)}}function a(t){try{d(r.throw(t))}catch(t){o(t)}}function d(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}d((r=r.apply(t,e||[])).next())}))};class a{constructor(t){if(this._eventBus=new o.EventBus,this.isVisible=!1,!t.network)throw"{Matic Widget Error} : network is not specified. Please specify network type.";this._config=Object.assign(Object.assign({},r.defaultConfig),t)}loadAssets(t){return s(this,void 0,void 0,(function*(){const e=t.map(t=>Object(o.loadScript)(t));return Promise.all(e)}))}getAssets(){return s(this,void 0,void 0,(function*(){const t=a.assetsUrl+"manifest.js";return yield Object(o.loadScript)(t),polygonWidgetManifest}))}create(){return s(this,void 0,void 0,(function*(){const t=this._config;if(t.assetsFromWidgetServer){const t=(yield this.getAssets()).map(t=>`${a.assetsUrl}${t}`);yield this.loadAssets(t)}if(t.target){const e=document.querySelectorAll(t.target);if(0==e.length)throw"{Matic Widget Error} : invalid target supplied. Please provide a valid element selector.";e.forEach(t=>{t.onclick=()=>{this.show()}})}const e=document.createElement("div");this._el=e,e.style.cssText=`height:${t.height}px;width:${t.width}px;`,e.className=`matic-widget ${t.position} matic-widget--hide`;const n=t.style;for(const t in n)e.style[t]=n[t];t.overlay&&(e.className+=" widget-overlay");const r=document.createElement("matic-widget");r.className="matic-widget_iframe",r.setAttribute("appid",t.appName),r.setAttribute("page",t.page),r.setAttribute("amount",t.amount),r.setAttribute("network",t.network),e.appendChild(r),document.body.appendChild(e),this._onMessageFromWidget=t=>{const e=t.detail;if(e)switch(this._eventBus.emit(e.name,e.payload),e.name){case i.WIDGET_EVENT.close:this.hide()}},r.addEventListener("message",this._onMessageFromWidget),t.autoShowTime&&setTimeout(()=>{this.show()},t.autoShowTime)}))}show(){this.isVisible||(this._el.classList.add("matic-widget--slide-down"),this._el.classList.remove("matic-widget--hide"),setTimeout(()=>{Object(o.addAnimation)(this._el,"matic-widget--slide-up").then(t=>{this._el.classList.remove("matic-widget--slide-down"),this._eventBus.emit("show")})},100),this.isVisible=!0)}hide(){this.isVisible&&(Object(o.addAnimation)(this._el,"matic-widget--slide-down").then(t=>{this._eventBus.emit("hide"),this._el.classList.add("matic-widget--hide")}),this.isVisible=!1)}on(t,e){return this._eventBus.on(t,e),this}off(t,e){this._eventBus.off(t,e)}destroy(){const t=this._el;if(!t)return;const e=t.querySelector("matic-widget");null==e||e.removeEventListener("message",this._onMessageFromWidget),document.body.removeChild(t)}}a.assetsUrl="https://wallet-asset.matic.network/widget/"},"./widget/styles/index.scss":
/*!**********************************!*\
  !*** ./widget/styles/index.scss ***!
  \**********************************/
/*! no static exports found */function(t,e,n){var r=n(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./index.scss */"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss");"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(r,i);r.locals&&(t.exports=r.locals)},"./widget/utils/animate_css.ts":
/*!*************************************!*\
  !*** ./widget/utils/animate_css.ts ***!
  \*************************************/
/*! exports provided: addAnimation */function(t,e,n){"use strict";function r(t,e){const n="string"==typeof t?document.querySelector(t):t;return new Promise(t=>{n.classList.add(e),n.addEventListener("transitionend",(function r(){n.classList.remove(e),n.removeEventListener("transitionend",r),t()}))})}n.r(e),n.d(e,"addAnimation",(function(){return r}))},"./widget/utils/event_bus.ts":
/*!***********************************!*\
  !*** ./widget/utils/event_bus.ts ***!
  \***********************************/
/*! exports provided: EventBus */function(t,e,n){"use strict";n.r(e),n.d(e,"EventBus",(function(){return r}));class r{constructor(){this._events={}}on(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)}off(t,e){if(e){const n=this._events[t].findIndex(t=>t===e);n>=0&&this._events[t].splice(n,1)}else this._events[t]=null}emit(t,...e){const n=this._events[t];n&&n.forEach(t=>{t(e)})}}},"./widget/utils/index.ts":
/*!*******************************!*\
  !*** ./widget/utils/index.ts ***!
  \*******************************/
/*! exports provided: EventBus, addAnimation, removeLastSlash, loadScript */function(t,e,n){"use strict";n.r(e);var r=n(/*! ./event_bus */"./widget/utils/event_bus.ts");n.d(e,"EventBus",(function(){return r.EventBus}));var i=n(/*! ./animate_css */"./widget/utils/animate_css.ts");n.d(e,"addAnimation",(function(){return i.addAnimation}));var o=n(/*! ./remove_last_slash */"./widget/utils/remove_last_slash.ts");n.d(e,"removeLastSlash",(function(){return o.removeLastSlash}));var s=n(/*! ./load_script */"./widget/utils/load_script.ts");n.d(e,"loadScript",(function(){return s.loadScript}))},"./widget/utils/load_script.ts":
/*!*************************************!*\
  !*** ./widget/utils/load_script.ts ***!
  \*************************************/
/*! exports provided: loadScript */function(t,e,n){"use strict";n.r(e),n.d(e,"loadScript",(function(){return r}));const r=t=>{const e=document.createElement("script");return e.src=t,document.body.appendChild(e),new Promise((t,n)=>{e.onload=t,e.onerror=n})}},"./widget/utils/remove_last_slash.ts":
/*!*******************************************!*\
  !*** ./widget/utils/remove_last_slash.ts ***!
  \*******************************************/
/*! exports provided: removeLastSlash */function(t,e,n){"use strict";n.r(e),n.d(e,"removeLastSlash",(function(){return r}));const r=t=>{const e=t.length-1;return"/"===t[e]&&(t=t.substr(e)),t}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,