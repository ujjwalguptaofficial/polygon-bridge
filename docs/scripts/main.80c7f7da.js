!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){t.exports=n(2)},function(t,e,n){"use strict";n.r(e);var i=n(0),r=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))},o=function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=localStorage.getItem("network");s=s||"mainnet";var a=document.querySelector("#selectNetwork");a.addEventListener("change",(function(t){localStorage.setItem("network",t.target.value),location.reload()})),a.value=s,function(){r(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,(t=new i.Widget({appName:"test",position:"bottom-right",network:s,closable:!1})).create()];case 1:return e.sent(),t.show(),[2]}}))}))}()},function(t,e,n){t.exports=function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./widget/index.ts")}({"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss ***!
  \***************************************************************************************************************/
/*! no static exports found */function(t,e,n){(t.exports=n(/*! ../../node_modules/css-loader/dist/runtime/api.js */"./node_modules/css-loader/dist/runtime/api.js")(!1)).push([t.i,'.matic-widget {\n  position: fixed;\n  transition: transform 1s;\n  background-color: #fff;\n  z-index: 10000;\n  height: 100%;\n  width: 100%;\n  max-height: 100%;\n  max-width: 100%; }\n  .matic-widget.mobile-position {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0; }\n  @media (min-width: 576px) {\n    .matic-widget {\n      max-height: 90%;\n      max-width: 80%;\n      border: 1px solid #f1eded;\n      border-radius: 20px; } }\n  .matic-widget--slide-down {\n    transform: translateY(1000px);\n    border-radius: 20px; }\n  .matic-widget--slide-up {\n    transform: translateY(0); }\n  .matic-widget--hide {\n    display: none; }\n  .matic-widget__iframe {\n    width: 100%;\n    height: 100%;\n    border: none; }\n  .matic-widget--center {\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n    top: 0;\n    bottom: 0;\n    margin-top: auto;\n    margin-bottom: auto; }\n  .matic-widget--bottom-right {\n    bottom: 5px;\n    right: 5px; }\n  .matic-widget--bottom-left {\n    bottom: 5px;\n    left: 5px; }\n  .matic-widget__overlay::before {\n    content: "";\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.2);\n    border-radius: 20px;\n    animation: 0.3s ease 1.87s forwards fade-in; }\n  .matic-widget__loading {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 20px; }\n\n@keyframes fade-in {\n  0% {\n    border-radius: 20px; }\n  80% {\n    border-radius: 20px; }\n  100% {\n    border-radius: 0; } }\n',""])},"./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var r=(s=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=i.sources.map((function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"}));return[n].concat(o).concat([r]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(r=0;r<t.length;r++){var s=t[r];null!=s[0]&&i[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(t,e,n){var i,r,o={},s=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),a=function(t,e){return e?e.querySelector(t):document.querySelector(t)},c=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var i=a.call(this,t,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),l=null,d=0,u=[],f=n(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function p(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=o[i.id];if(r){r.refs++;for(var s=0;s<r.parts.length;s++)r.parts[s](i.parts[s]);for(;s<i.parts.length;s++)r.parts.push(w(i.parts[s],e))}else{var a=[];for(s=0;s<i.parts.length;s++)a.push(w(i.parts[s],e));o[i.id]={id:i.id,refs:1,parts:a}}}}function h(t,e){for(var n=[],i={},r=0;r<t.length;r++){var o=t[r],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};i[s]?i[s].parts.push(a):n.push(i[s]={id:s,parts:[a]})}return n}function m(t,e){var n=c(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=c(t.insertAt.before,n);n.insertBefore(e,r)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return n.nc}();i&&(t.attrs.nonce=i)}return b(e,t.attrs),m(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function w(t,e){var n,i,r,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var s=d++;n=l||(l=g(e)),i=_.bind(null,n,s,!1),r=_.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),m(t,e),e}(e),i=j.bind(null,n,e),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),i=E.bind(null,n),r=function(){v(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=h(t,e);return p(n,e),function(t){for(var i=[],r=0;r<n.length;r++){var s=n[r];(a=o[s.id]).refs--,i.push(a)}t&&p(h(t,e),e);for(r=0;r<i.length;r++){var a;if(0===(a=i[r]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete o[a.id]}}}};var y,x=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function _(t,e,n,i){var r=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=x(e,r);else{var o=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function E(t,e){var n=e.css,i=e.media;if(i&&t.setAttribute("media",i),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function j(t,e,n){var i=n.css,r=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||o)&&(i=f(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var s=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,i=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var r,o=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(r=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:i+o.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},"./src/enums/widget_event.ts":
/*!***********************************!*\
  !*** ./src/enums/widget_event.ts ***!
  \***********************************/
/*! exports provided: WIDGET_EVENT */function(t,e,n){"use strict";var i;n.r(e),n.d(e,"WIDGET_EVENT",(function(){return i})),function(t){t.close="close",t.burnInit="burnInit",t.burnComplete="burnComplete",t.exitInit="exitInit",t.exitError="exitError",t.exitComplete="exitComplete",t.confirmWithdrawInit="confirmWithdrawInit",t.confirmWithdrawComplete="confirmWithdrawComplete",t.confirmWithdrawError="confirmWithdrawError",t.load="load",t.approveInit="approveInit",t.approveComplete="approveComplete",t.approveError="approveError",t.depositInit="depositInit",t.depositComplete="depositComplete",t.depositError="depositError"}(i||(i={}))},"./widget/constants.ts":
/*!*****************************!*\
  !*** ./widget/constants.ts ***!
  \*****************************/
/*! exports provided: appVersion, defaultConfig */function(t,e,n){"use strict";n.r(e),n.d(e,"appVersion",(function(){return i})),n.d(e,"defaultConfig",(function(){return r}));const i="1.1.0",r={autoShowTime:-1,height:618,newTabForMobile:!1,width:540,position:"",appName:"",relativePath:"",assetsFromWidgetServer:!0,overlay:!1,style:{},closable:!0,loading:{color:"#3e3e3e",background:"#f0f0f0","font-size":"24px","line-height":"28px"}}},"./widget/index.ts":
/*!*************************!*\
  !*** ./widget/index.ts ***!
  \*************************/
/*! exports provided: Widget */function(t,e,n){"use strict";n.r(e),n.d(e,"Widget",(function(){return a}));var i=n(/*! ./constants */"./widget/constants.ts"),r=n(/*! ../src/enums/widget_event */"./src/enums/widget_event.ts"),o=(n(/*! ./styles/index.scss */"./widget/styles/index.scss"),n(/*! ./utils */"./widget/utils/index.ts")),s=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};class a{constructor(t){if(this._eventBus=new o.EventBus,this.isVisible=!1,this.loaderElem=document.createElement("div"),this.assetsLoaded=!1,!t.network)throw"{Matic Widget Error} : network is not specified. Please specify network type.";this._config=Object.assign(Object.assign({},i.defaultConfig),t)}assetsLoader(){const t=this._config;this.loaderElem.className="matic-widget matic-widget__loading",this.isMobileDevice()?this.loaderElem.classList.add("mobile-position"):(this.loaderElem.style.cssText=`height: ${t.height}px; width: ${t.width}px;`,this.loaderElem.classList.add("matic-widget--"+t.position));const e=t.loading;for(const t in e)this.loaderElem.style[t]=e[t];const n=document.createElement("div");n.innerHTML+="...loading",this.loaderElem.appendChild(n),document.body.appendChild(this.loaderElem)}loadAssets(t){return s(this,void 0,void 0,(function*(){const e=t.map(t=>Object(o.loadScript)(t));return Promise.all(e)}))}getAssets(){return s(this,void 0,void 0,(function*(){const t=a.assetsUrl+"manifest.js";return yield Object(o.loadScript)(t),polygonWidgetManifest}))}create(){return s(this,void 0,void 0,(function*(){const t=this._config;if(t.assetsFromWidgetServer){const t=(yield this.getAssets()).map(t=>`${a.assetsUrl}${t}`);yield this.loadAssets(t)}if(t.target){const e=document.querySelectorAll(t.target);if(0==e.length)throw"{Matic Widget Error} : invalid target supplied. Please provide a valid element selector.";e.forEach(t=>{t.onclick=()=>{this.show()}})}const e=document.createElement("div");this._el=e,e.className="matic-widget matic-widget--hide",this.isMobileDevice()?e.classList.add("mobile-position"):(e.style.cssText=`height:${t.height}px;width:${t.width}px;`,e.classList.add("matic-widget--"+t.position));const n=t.style;for(const t in n)e.style[t]=n[t];t.overlay&&(e.className+=" matic-widget__overlay");const i=document.createElement("matic-widget");i.className="matic-widget__iframe",i.setAttribute("appid",t.appName),i.setAttribute("page",t.page),i.setAttribute("amount",t.amount),i.setAttribute("network",t.network),this.isMobileDevice()?i.setAttribute("closable","true"):i.setAttribute("closable",t.closable),e.appendChild(i),document.body.appendChild(e),this._onMessageFromWidget=t=>{const e=t.detail;if(e)switch(this._eventBus.emit(e.name,e.payload),e.name){case r.WIDGET_EVENT.close:this.hide()}},i.addEventListener("message",this._onMessageFromWidget);const o=Number(t.autoShowTime);!isNaN(o)&&o>0&&setTimeout(()=>{this.show()},o),this.assetsLoaded=!0}))}show(){this.assetsLoaded||this.assetsLoader(),this.isVisible||(this._el.classList.add("matic-widget--slide-down"),this._el.classList.remove("matic-widget--hide"),setTimeout(()=>{Object(o.addAnimation)(this._el,"matic-widget--slide-up").then(t=>{this._el.classList.remove("matic-widget--slide-down"),this._eventBus.emit("show");const e=this.loaderElem;e&&document.body.contains(e)&&(document.body.removeChild(e),this.loaderElem=null)})},100),this.isVisible=!0)}hide(){this.isVisible&&Object(o.addAnimation)(this._el,"matic-widget--slide-down").then(t=>{this._eventBus.emit("hide"),this._el.classList.add("matic-widget--hide"),this.isVisible=!1})}on(t,e){return this._eventBus.on(t,e),this}off(t,e){this._eventBus.off(t,e)}isMobileDevice(){return window.screen.width<576}destroy(){const t=this._el;if(!t)return;const e=t.querySelector("matic-widget");null==e||e.removeEventListener("message",this._onMessageFromWidget),document.body.removeChild(t)}}a.assetsUrl="https://wallet-asset.matic.network/widget/"},"./widget/styles/index.scss":
/*!**********************************!*\
  !*** ./widget/styles/index.scss ***!
  \**********************************/
/*! no static exports found */function(t,e,n){var i=n(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./index.scss */"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./widget/styles/index.scss");"string"==typeof i&&(i=[[t.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(i,r);i.locals&&(t.exports=i.locals)},"./widget/utils/animate_css.ts":
/*!*************************************!*\
  !*** ./widget/utils/animate_css.ts ***!
  \*************************************/
/*! exports provided: addAnimation */function(t,e,n){"use strict";function i(t,e){const n="string"==typeof t?document.querySelector(t):t;return new Promise(t=>{n.classList.add(e),n.addEventListener("transitionend",(function i(){n.classList.remove(e),n.removeEventListener("transitionend",i),t()}))})}n.r(e),n.d(e,"addAnimation",(function(){return i}))},"./widget/utils/event_bus.ts":
/*!***********************************!*\
  !*** ./widget/utils/event_bus.ts ***!
  \***********************************/
/*! exports provided: EventBus */function(t,e,n){"use strict";n.r(e),n.d(e,"EventBus",(function(){return i}));class i{constructor(){this._events={}}on(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)}off(t,e){if(e){const n=this._events[t].findIndex(t=>t===e);n>=0&&this._events[t].splice(n,1)}else this._events[t]=null}emit(t,...e){const n=this._events[t];n&&n.forEach(t=>{t(e)})}}},"./widget/utils/index.ts":
/*!*******************************!*\
  !*** ./widget/utils/index.ts ***!
  \*******************************/
/*! exports provided: EventBus, addAnimation, removeLastSlash, loadScript */function(t,e,n){"use strict";n.r(e);var i=n(/*! ./event_bus */"./widget/utils/event_bus.ts");n.d(e,"EventBus",(function(){return i.EventBus}));var r=n(/*! ./animate_css */"./widget/utils/animate_css.ts");n.d(e,"addAnimation",(function(){return r.addAnimation}));var o=n(/*! ./remove_last_slash */"./widget/utils/remove_last_slash.ts");n.d(e,"removeLastSlash",(function(){return o.removeLastSlash}));var s=n(/*! ./load_script */"./widget/utils/load_script.ts");n.d(e,"loadScript",(function(){return s.loadScript}))},"./widget/utils/load_script.ts":
/*!*************************************!*\
  !*** ./widget/utils/load_script.ts ***!
  \*************************************/
/*! exports provided: loadScript */function(t,e,n){"use strict";n.r(e),n.d(e,"loadScript",(function(){return i}));const i=t=>{const e=document.createElement("script");return e.src=t,document.body.appendChild(e),new Promise((t,n)=>{e.onload=t,e.onerror=n})}},"./widget/utils/remove_last_slash.ts":
/*!*******************************************!*\
  !*** ./widget/utils/remove_last_slash.ts ***!
  \*******************************************/
/*! exports provided: removeLastSlash */function(t,e,n){"use strict";n.r(e),n.d(e,"removeLastSlash",(function(){return i}));const i=t=>{const e=t.length-1;return"/"===t[e]&&(t=t.substr(e)),t}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRpY25ldHdvcmsvd2FsbGV0LXdpZGdldC9kaXN0L25wbS5leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0aWNuZXR3b3JrL3dhbGxldC13aWRnZXQvZGlzdC93aWRnZXQuY29tbW9uanMyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic2F2ZWROZXR3b3JrIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzZXRJdGVtIiwidGFyZ2V0IiwibG9jYXRpb24iLCJyZWxvYWQiLCJ3aWRnZXQiLCJhcHBOYW1lIiwicG9zaXRpb24iLCJuZXR3b3JrIiwiY2xvc2FibGUiLCJzaG93IiwiY3JlYXRlV2lkZ2V0IiwicHVzaCIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIndpbmRvdyIsImFsbCIsImF0b2IiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldFRhcmdldCIsInBhcmVudCIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0IiwidHJhbnNmb3JtIiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJocmVmIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIldJREdFVF9FVkVOVCIsImFwcFZlcnNpb24iLCJkZWZhdWx0Q29uZmlnIiwiYXV0b1Nob3dUaW1lIiwiaGVpZ2h0IiwibmV3VGFiRm9yTW9iaWxlIiwid2lkdGgiLCJyZWxhdGl2ZVBhdGgiLCJhc3NldHNGcm9tV2lkZ2V0U2VydmVyIiwib3ZlcmxheSIsImxvYWRpbmciLCJjb2xvciIsImJhY2tncm91bmQiLCJXaWRnZXQiLCJfY29uc3RhbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfc3JjX2VudW1zX3dpZGdldF9ldmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImNvbmZpZyIsIl9ldmVudEJ1cyIsImlzVmlzaWJsZSIsImxvYWRlckVsZW0iLCJhc3NldHNMb2FkZWQiLCJfY29uZmlnIiwiYXNzaWduIiwiY2xhc3NOYW1lIiwiaXNNb2JpbGVEZXZpY2UiLCJjbGFzc0xpc3QiLCJhZGQiLCJsb2FkaW5nU3R5bGUiLCJsb2FkZXJNZXNzYWdlIiwiaW5uZXJIVE1MIiwiYm9keSIsInNyY0xpc3QiLCJwcm9taXNlcyIsInNyYyIsIm1hbmlmZXN0UGF0aCIsImFzc2V0c1VybCIsInBvbHlnb25XaWRnZXRNYW5pZmVzdCIsImdldEFzc2V0cyIsImFzc2V0IiwibG9hZEFzc2V0cyIsImVscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbmNsaWNrIiwiX2VsIiwiY29uZmlnU3R5bGUiLCJ3aWRnZXRFbCIsInBhZ2UiLCJhbW91bnQiLCJfb25NZXNzYWdlRnJvbVdpZGdldCIsImV2IiwiZGV0YWlsIiwiZW1pdCIsInBheWxvYWQiLCJjbG9zZSIsImhpZGUiLCJOdW1iZXIiLCJpc05hTiIsInNldFRpbWVvdXQiLCJhc3NldHNMb2FkZXIiLCJfIiwiY29udGFpbnMiLCJldmVudCIsImNhbGxiYWNrIiwib24iLCJvZmYiLCJzY3JlZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9jYWxzIiwiYWRkQW5pbWF0aW9uIiwiZWxlbWVudCIsImFuaW1hdGlvbk5hbWUiLCJub2RlIiwicmVzIiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiRXZlbnRCdXMiLCJfZXZlbnRzIiwiZXZlbnROYW1lIiwiZmluZEluZGV4IiwicSIsImFyZ3MiLCJldmVudHMiLCJfZXZlbnRfYnVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYW5pbWF0ZV9jc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9yZW1vdmVfbGFzdF9zbGFzaF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2xvYWRfc2NyaXB0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJsb2FkU2NyaXB0Iiwic2NyaXB0IiwicmVqIiwib25sb2FkIiwib25lcnJvciIsInJlbW92ZUxhc3RTbGFzaCIsInVybCIsImxhc3RJbmRleCIsInN1YnN0ciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FB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RUFBb0JrQixFQUFFaUwsR0FDU25NLEVBQW9CVSxFQUFFeUwsRUFBcUIsY0FBYyxXQUFhLE9BQU9xRyxLQUM1RyxNQUFNQSxFQUFjcEQsSUFDaEIsTUFBTXFELEVBQVNqUSxTQUFTOEYsY0FBYyxVQUd0QyxPQUZBbUssRUFBT3JELElBQU1BLEVBQ2I1TSxTQUFTeU0sS0FBS3JILFlBQVk2SyxHQUNuQixJQUFJL0UsUUFBUSxDQUFDaUUsRUFBS2UsS0FDckJELEVBQU9FLE9BQVNoQixFQUNoQmMsRUFBT0csUUFBVUYsTUFPbkI7Ozs7d0NBS0EsU0FBVXZTLEVBQVFnTSxFQUFxQm5NLEdBRTdDLGFBQ0FBLEVBQW9Ca0IsRUFBRWlMLEdBQ1NuTSxFQUFvQlUsRUFBRXlMLEVBQXFCLG1CQUFtQixXQUFhLE9BQU8wRyxLQUNqSCxNQUFNQSxFQUFtQkMsSUFDckIsTUFBTUMsRUFBWUQsRUFBSTlOLE9BQVMsRUFJL0IsTUFIdUIsTUFBbkI4TixFQUFJQyxLQUNKRCxFQUFNQSxFQUFJRSxPQUFPRCxJQUVkRCIsImZpbGUiOiJzY3JpcHRzL21haW4uODBjN2Y3ZGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvLyByZXF1aXJlKFwiLi9lbGVtZW50LmV4cG9ydC5qc1wiKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vd2lkZ2V0LmNvbW1vbmpzMi5qc1wiKTtcbiIsImltcG9ydCB7IFdpZGdldCB9IGZyb20gXCJAbWF0aWNuZXR3b3JrL3dhbGxldC13aWRnZXRcIjtcbi8vIGltcG9ydCBcImZsZXhzdHlsZVwiO1xubGV0IHNhdmVkTmV0d29yayA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibmV0d29ya1wiKTtcbnNhdmVkTmV0d29yayA9IHNhdmVkTmV0d29yayA/IHNhdmVkTmV0d29yayBhcyBhbnkgOiBcIm1haW5uZXRcIlxuY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VsZWN0TmV0d29yaycpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibmV0d29ya1wiLCAoZS50YXJnZXQgYXMgYW55KS52YWx1ZSk7XG4gICAgbG9jYXRpb24ucmVsb2FkKCk7XG59KVxuZWwudmFsdWUgPSBzYXZlZE5ldHdvcms7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdpZGdldCgpIHtcbiAgICBjb25zdCB3aWRnZXQgPSBuZXcgV2lkZ2V0KHtcbiAgICAgICAgYXBwTmFtZTogXCJ0ZXN0XCIsXG4gICAgICAgIC8vIGF1dG9TaG93VGltZTogMTAwLFxuICAgICAgICBwb3NpdGlvbjogXCJib3R0b20tcmlnaHRcIixcbiAgICAgICAgLy8gdGFyZ2V0OiAnI3dpZGdldCcsXG4gICAgICAgIG5ldHdvcms6IHNhdmVkTmV0d29yayBhcyBhbnksXG4gICAgICAgIGNsb3NhYmxlOiBmYWxzZVxuICAgIH0pXG4gICAgYXdhaXQgd2lkZ2V0LmNyZWF0ZSgpO1xuICAgIHdpZGdldC5zaG93KCk7XG59XG5cbmNyZWF0ZVdpZGdldCgpO1xuXG5cbiIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3dpZGdldC9pbmRleC50c1wiKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2lkZ2V0L3N0eWxlcy9pbmRleC5zY3NzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3dpZGdldC9zdHlsZXMvaW5kZXguc2NzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMgKi8gXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pLCBcIi5tYXRpYy13aWRnZXQge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDFzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHotaW5kZXg6IDEwMDAwO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAubWF0aWMtd2lkZ2V0Lm1vYmlsZS1wb3NpdGlvbiB7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgbGVmdDogMDsgfVxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAgIC5tYXRpYy13aWRnZXQge1xcbiAgICAgIG1heC1oZWlnaHQ6IDkwJTtcXG4gICAgICBtYXgtd2lkdGg6IDgwJTtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjFlZGVkO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7IH0gfVxcbiAgLm1hdGljLXdpZGdldC0tc2xpZGUtZG93biB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAwcHgpO1xcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4OyB9XFxuICAubWF0aWMtd2lkZ2V0LS1zbGlkZS11cCB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgfVxcbiAgLm1hdGljLXdpZGdldC0taGlkZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gIC5tYXRpYy13aWRnZXRfX2lmcmFtZSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJvcmRlcjogbm9uZTsgfVxcbiAgLm1hdGljLXdpZGdldC0tY2VudGVyIHtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICAgIHRvcDogMDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvO1xcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvOyB9XFxuICAubWF0aWMtd2lkZ2V0LS1ib3R0b20tcmlnaHQge1xcbiAgICBib3R0b206IDVweDtcXG4gICAgcmlnaHQ6IDVweDsgfVxcbiAgLm1hdGljLXdpZGdldC0tYm90dG9tLWxlZnQge1xcbiAgICBib3R0b206IDVweDtcXG4gICAgbGVmdDogNXB4OyB9XFxuICAubWF0aWMtd2lkZ2V0X19vdmVybGF5OjpiZWZvcmUge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gICAgYW5pbWF0aW9uOiAwLjNzIGVhc2UgMS44N3MgZm9yd2FyZHMgZmFkZS1pbjsgfVxcbiAgLm1hdGljLXdpZGdldF9fbG9hZGluZyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4OyB9XFxuXFxuQGtleWZyYW1lcyBmYWRlLWluIHtcXG4gIDAlIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDsgfVxcbiAgODAlIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDsgfVxcbiAgMTAwJSB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7IH0gfVxcblwiLCBcIlwiXSk7XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXJscyAqLyBcIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmIChmYWxzZSkge31cblxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5uYztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9lbnVtcy93aWRnZXRfZXZlbnQudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2VudW1zL3dpZGdldF9ldmVudC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogV0lER0VUX0VWRU5UICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIldJREdFVF9FVkVOVFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFdJREdFVF9FVkVOVDsgfSk7XG52YXIgV0lER0VUX0VWRU5UO1xuKGZ1bmN0aW9uIChXSURHRVRfRVZFTlQpIHtcbiAgICBXSURHRVRfRVZFTlRbXCJjbG9zZVwiXSA9IFwiY2xvc2VcIjtcbiAgICBXSURHRVRfRVZFTlRbXCJidXJuSW5pdFwiXSA9IFwiYnVybkluaXRcIjtcbiAgICBXSURHRVRfRVZFTlRbXCJidXJuQ29tcGxldGVcIl0gPSBcImJ1cm5Db21wbGV0ZVwiO1xuICAgIFdJREdFVF9FVkVOVFtcImV4aXRJbml0XCJdID0gXCJleGl0SW5pdFwiO1xuICAgIFdJREdFVF9FVkVOVFtcImV4aXRFcnJvclwiXSA9IFwiZXhpdEVycm9yXCI7XG4gICAgV0lER0VUX0VWRU5UW1wiZXhpdENvbXBsZXRlXCJdID0gXCJleGl0Q29tcGxldGVcIjtcbiAgICBXSURHRVRfRVZFTlRbXCJjb25maXJtV2l0aGRyYXdJbml0XCJdID0gXCJjb25maXJtV2l0aGRyYXdJbml0XCI7XG4gICAgV0lER0VUX0VWRU5UW1wiY29uZmlybVdpdGhkcmF3Q29tcGxldGVcIl0gPSBcImNvbmZpcm1XaXRoZHJhd0NvbXBsZXRlXCI7XG4gICAgV0lER0VUX0VWRU5UW1wiY29uZmlybVdpdGhkcmF3RXJyb3JcIl0gPSBcImNvbmZpcm1XaXRoZHJhd0Vycm9yXCI7XG4gICAgV0lER0VUX0VWRU5UW1wibG9hZFwiXSA9IFwibG9hZFwiO1xuICAgIFdJREdFVF9FVkVOVFtcImFwcHJvdmVJbml0XCJdID0gXCJhcHByb3ZlSW5pdFwiO1xuICAgIFdJREdFVF9FVkVOVFtcImFwcHJvdmVDb21wbGV0ZVwiXSA9IFwiYXBwcm92ZUNvbXBsZXRlXCI7XG4gICAgV0lER0VUX0VWRU5UW1wiYXBwcm92ZUVycm9yXCJdID0gXCJhcHByb3ZlRXJyb3JcIjtcbiAgICBXSURHRVRfRVZFTlRbXCJkZXBvc2l0SW5pdFwiXSA9IFwiZGVwb3NpdEluaXRcIjtcbiAgICBXSURHRVRfRVZFTlRbXCJkZXBvc2l0Q29tcGxldGVcIl0gPSBcImRlcG9zaXRDb21wbGV0ZVwiO1xuICAgIFdJREdFVF9FVkVOVFtcImRlcG9zaXRFcnJvclwiXSA9IFwiZGVwb3NpdEVycm9yXCI7XG59KShXSURHRVRfRVZFTlQgfHwgKFdJREdFVF9FVkVOVCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvY29uc3RhbnRzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3dpZGdldC9jb25zdGFudHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGFwcFZlcnNpb24sIGRlZmF1bHRDb25maWcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYXBwVmVyc2lvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFwcFZlcnNpb247IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRDb25maWdcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBkZWZhdWx0Q29uZmlnOyB9KTtcbmNvbnN0IGFwcFZlcnNpb24gPSBcIjEuMS4wXCI7XG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGF1dG9TaG93VGltZTogLTEsXG4gICAgaGVpZ2h0OiA2MTgsXG4gICAgbmV3VGFiRm9yTW9iaWxlOiBmYWxzZSxcbiAgICAvL3RpdGxlOiBcIk1hdGljIFdpZGdldFwiLFxuICAgIHdpZHRoOiA1NDAsXG4gICAgcG9zaXRpb246ICcnLFxuICAgIC8vdHlwZTogJ3dhbGxldCcsXG4gICAgLy9zaG91bGRmbG9hdDogdHJ1ZSxcbiAgICBhcHBOYW1lOiAnJyxcbiAgICByZWxhdGl2ZVBhdGg6ICcnLFxuICAgIGFzc2V0c0Zyb21XaWRnZXRTZXJ2ZXI6IHRydWUsXG4gICAgb3ZlcmxheTogZmFsc2UsXG4gICAgc3R5bGU6IHt9LFxuICAgIGNsb3NhYmxlOiB0cnVlLFxuICAgIGxvYWRpbmc6IHtcbiAgICAgICAgY29sb3I6ICcjM2UzZTNlJyxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmMGYwZjAnLFxuICAgICAgICAnZm9udC1zaXplJzogJzI0cHgnLFxuICAgICAgICAnbGluZS1oZWlnaHQnOiAnMjhweCcsXG4gICAgfSxcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvaW5kZXgudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi93aWRnZXQvaW5kZXgudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogV2lkZ2V0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIldpZGdldFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFdpZGdldDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2NvbnN0YW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb25zdGFudHMgKi8gXCIuL3dpZGdldC9jb25zdGFudHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19lbnVtc193aWRnZXRfZXZlbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3NyYy9lbnVtcy93aWRnZXRfZXZlbnQgKi8gXCIuL3NyYy9lbnVtcy93aWRnZXRfZXZlbnQudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3N0eWxlc19pbmRleF9zY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3N0eWxlcy9pbmRleC5zY3NzICovIFwiLi93aWRnZXQvc3R5bGVzL2luZGV4LnNjc3NcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3N0eWxlc19pbmRleF9zY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX3N0eWxlc19pbmRleF9zY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscyAqLyBcIi4vd2lkZ2V0L3V0aWxzL2luZGV4LnRzXCIpO1xudmFyIF9fYXdhaXRlciA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuXG5cblxuXG5jb25zdCBNQVRJQ19XSURHRVQgPSBcIm1hdGljLXdpZGdldFwiO1xuY2xhc3MgV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRCdXMgPSBuZXcgX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJFdmVudEJ1c1wiXSgpO1xuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRlckVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5hc3NldHNMb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFjb25maWcubmV0d29yaykge1xuICAgICAgICAgICAgdGhyb3cgYHtNYXRpYyBXaWRnZXQgRXJyb3J9IDogbmV0d29yayBpcyBub3Qgc3BlY2lmaWVkLiBQbGVhc2Ugc3BlY2lmeSBuZXR3b3JrIHR5cGUuYDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIF9jb25zdGFudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRDb25maWdcIl0pLCBjb25maWcpO1xuICAgIH1cbiAgICBhc3NldHNMb2FkZXIoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgdGhpcy5sb2FkZXJFbGVtLmNsYXNzTmFtZSA9IGBtYXRpYy13aWRnZXQgbWF0aWMtd2lkZ2V0X19sb2FkaW5nYDtcbiAgICAgICAgaWYgKCF0aGlzLmlzTW9iaWxlRGV2aWNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyRWxlbS5zdHlsZS5jc3NUZXh0ID0gYGhlaWdodDogJHtjb25maWcuaGVpZ2h0fXB4OyB3aWR0aDogJHtjb25maWcud2lkdGh9cHg7YDtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyRWxlbS5jbGFzc0xpc3QuYWRkKGBtYXRpYy13aWRnZXQtLSR7Y29uZmlnLnBvc2l0aW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2FkZXJFbGVtLmNsYXNzTGlzdC5hZGQoJ21vYmlsZS1wb3NpdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvYWRpbmdTdHlsZSA9IGNvbmZpZy5sb2FkaW5nO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsb2FkaW5nU3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyRWxlbS5zdHlsZVtrZXldID0gbG9hZGluZ1N0eWxlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9hZGVyTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBsb2FkZXJNZXNzYWdlLmlubmVySFRNTCArPSAnLi4ubG9hZGluZyc7XG4gICAgICAgIHRoaXMubG9hZGVyRWxlbS5hcHBlbmRDaGlsZChsb2FkZXJNZXNzYWdlKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmxvYWRlckVsZW0pO1xuICAgIH1cbiAgICBsb2FkQXNzZXRzKHNyY0xpc3QpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gc3JjTGlzdC5tYXAoc3JjID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0KF91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wibG9hZFNjcmlwdFwiXSkoc3JjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEFzc2V0cygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0UGF0aCA9IFdpZGdldC5hc3NldHNVcmwgKyBcIm1hbmlmZXN0LmpzXCI7XG4gICAgICAgICAgICB5aWVsZCBPYmplY3QoX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJsb2FkU2NyaXB0XCJdKShtYW5pZmVzdFBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHBvbHlnb25XaWRnZXRNYW5pZmVzdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgICAgIGlmIChjb25maWcuYXNzZXRzRnJvbVdpZGdldFNlcnZlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFzc2V0cyA9IHlpZWxkIHRoaXMuZ2V0QXNzZXRzKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjTGlzdCA9IGFzc2V0cy5tYXAoYXNzZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7V2lkZ2V0LmFzc2V0c1VybH0ke2Fzc2V0fWA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5sb2FkQXNzZXRzKHNyY0xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbmZpZy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmIChlbHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYHtNYXRpYyBXaWRnZXQgRXJyb3J9IDogaW52YWxpZCB0YXJnZXQgc3VwcGxpZWQuIFBsZWFzZSBwcm92aWRlIGEgdmFsaWQgZWxlbWVudCBzZWxlY3Rvci5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWwub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRoaXMuX2VsID0gZWw7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBgbWF0aWMtd2lkZ2V0IG1hdGljLXdpZGdldC0taGlkZWA7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNNb2JpbGVEZXZpY2UoKSkge1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBgaGVpZ2h0OiR7Y29uZmlnLmhlaWdodH1weDt3aWR0aDoke2NvbmZpZy53aWR0aH1weDtgO1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYG1hdGljLXdpZGdldC0tJHtjb25maWcucG9zaXRpb259YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdtb2JpbGUtcG9zaXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZ1N0eWxlID0gY29uZmlnLnN0eWxlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29uZmlnU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZVtrZXldID0gY29uZmlnU3R5bGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcub3ZlcmxheSkge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSArPSBgIG1hdGljLXdpZGdldF9fb3ZlcmxheWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB3aWRnZXRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoTUFUSUNfV0lER0VUKTtcbiAgICAgICAgICAgIHdpZGdldEVsLmNsYXNzTmFtZSA9IFwibWF0aWMtd2lkZ2V0X19pZnJhbWVcIjtcbiAgICAgICAgICAgIHdpZGdldEVsLnNldEF0dHJpYnV0ZSgnYXBwaWQnLCBjb25maWcuYXBwTmFtZSk7XG4gICAgICAgICAgICB3aWRnZXRFbC5zZXRBdHRyaWJ1dGUoJ3BhZ2UnLCBjb25maWcucGFnZSk7XG4gICAgICAgICAgICB3aWRnZXRFbC5zZXRBdHRyaWJ1dGUoJ2Ftb3VudCcsIGNvbmZpZy5hbW91bnQpO1xuICAgICAgICAgICAgd2lkZ2V0RWwuc2V0QXR0cmlidXRlKCduZXR3b3JrJywgY29uZmlnLm5ldHdvcmspO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNNb2JpbGVEZXZpY2UoKSkge1xuICAgICAgICAgICAgICAgIHdpZGdldEVsLnNldEF0dHJpYnV0ZSgnY2xvc2FibGUnLCAndHJ1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lkZ2V0RWwuc2V0QXR0cmlidXRlKCdjbG9zYWJsZScsIGNvbmZpZy5jbG9zYWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZCh3aWRnZXRFbCk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgICAgIHRoaXMuX29uTWVzc2FnZUZyb21XaWRnZXQgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXRhaWwgPSBldi5kZXRhaWw7XG4gICAgICAgICAgICAgICAgaWYgKCFkZXRhaWwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudEJ1cy5lbWl0KGRldGFpbC5uYW1lLCBkZXRhaWwucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChkZXRhaWwubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIF9zcmNfZW51bXNfd2lkZ2V0X2V2ZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJXSURHRVRfRVZFTlRcIl0uY2xvc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aWRnZXRFbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5fb25NZXNzYWdlRnJvbVdpZGdldCk7XG4gICAgICAgICAgICBjb25zdCBhdXRvU2hvd1RpbWUgPSBOdW1iZXIoY29uZmlnLmF1dG9TaG93VGltZSk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGF1dG9TaG93VGltZSkgJiYgYXV0b1Nob3dUaW1lID4gMCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICB9LCBhdXRvU2hvd1RpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hc3NldHNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2hvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFzc2V0c0xvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5hc3NldHNMb2FkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5hZGQoJ21hdGljLXdpZGdldC0tc2xpZGUtZG93bicpO1xuICAgICAgICB0aGlzLl9lbC5jbGFzc0xpc3QucmVtb3ZlKCdtYXRpYy13aWRnZXQtLWhpZGUnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QoX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJhZGRBbmltYXRpb25cIl0pKHRoaXMuX2VsLCAnbWF0aWMtd2lkZ2V0LS1zbGlkZS11cCcpLnRoZW4oXyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LnJlbW92ZSgnbWF0aWMtd2lkZ2V0LS1zbGlkZS1kb3duJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRCdXMuZW1pdCgnc2hvdycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRlckVsZW0gPSB0aGlzLmxvYWRlckVsZW07XG4gICAgICAgICAgICAgICAgaWYgKGxvYWRlckVsZW0gJiYgZG9jdW1lbnQuYm9keS5jb250YWlucyhsb2FkZXJFbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxvYWRlckVsZW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlckVsZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGhpZGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIE9iamVjdChfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcImFkZEFuaW1hdGlvblwiXSkodGhpcy5fZWwsICdtYXRpYy13aWRnZXQtLXNsaWRlLWRvd24nKS50aGVuKF8gPT4ge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRCdXMuZW1pdCgnaGlkZScpO1xuICAgICAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LmFkZCgnbWF0aWMtd2lkZ2V0LS1oaWRlJyk7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50QnVzLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50QnVzLm9mZihldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBpc01vYmlsZURldmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPCA1NzY7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5fZWw7XG4gICAgICAgIGlmICghZWwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHdpZGdldCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ21hdGljLXdpZGdldCcpO1xuICAgICAgICB3aWRnZXQgPT09IG51bGwgfHwgd2lkZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aWRnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX29uTWVzc2FnZUZyb21XaWRnZXQpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICB9XG59XG5XaWRnZXQuYXNzZXRzVXJsID0gYGh0dHBzOi8vd2FsbGV0LWFzc2V0Lm1hdGljLm5ldHdvcmsvd2lkZ2V0L2A7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvc3R5bGVzL2luZGV4LnNjc3NcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi93aWRnZXQvc3R5bGVzL2luZGV4LnNjc3MgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXG52YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohICEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzICovIFwiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3dpZGdldC9zdHlsZXMvaW5kZXguc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzICovIFwiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihmYWxzZSkge31cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvdXRpbHMvYW5pbWF0ZV9jc3MudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi93aWRnZXQvdXRpbHMvYW5pbWF0ZV9jc3MudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogYWRkQW5pbWF0aW9uICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFkZEFuaW1hdGlvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFkZEFuaW1hdGlvbjsgfSk7XG5mdW5jdGlvbiBhZGRBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uTmFtZSkge1xuICAgIGNvbnN0IG5vZGUgPSB0eXBlb2YgZWxlbWVudCA9PSBcInN0cmluZ1wiID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KSA6IGVsZW1lbnQ7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUFuaW1hdGlvbkVuZCgpIHtcbiAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShhbmltYXRpb25OYW1lKTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICAgICAgICByZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoYW5pbWF0aW9uTmFtZSk7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgfSk7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvdXRpbHMvZXZlbnRfYnVzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3dpZGdldC91dGlscy9ldmVudF9idXMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEV2ZW50QnVzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkV2ZW50QnVzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRXZlbnRCdXM7IH0pO1xuY2xhc3MgRXZlbnRCdXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgICBvZmYoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0uZmluZEluZGV4KHEgPT4gcSA9PT0gY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVtaXQoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChldiA9PiB7XG4gICAgICAgICAgICAgICAgZXYoYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3dpZGdldC91dGlscy9pbmRleC50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3dpZGdldC91dGlscy9pbmRleC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBFdmVudEJ1cywgYWRkQW5pbWF0aW9uLCByZW1vdmVMYXN0U2xhc2gsIGxvYWRTY3JpcHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2V2ZW50X2J1c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ldmVudF9idXMgKi8gXCIuL3dpZGdldC91dGlscy9ldmVudF9idXMudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJFdmVudEJ1c1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9ldmVudF9idXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcIkV2ZW50QnVzXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9hbmltYXRlX2Nzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hbmltYXRlX2NzcyAqLyBcIi4vd2lkZ2V0L3V0aWxzL2FuaW1hdGVfY3NzLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYWRkQW5pbWF0aW9uXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2FuaW1hdGVfY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJhZGRBbmltYXRpb25cIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3JlbW92ZV9sYXN0X3NsYXNoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlbW92ZV9sYXN0X3NsYXNoICovIFwiLi93aWRnZXQvdXRpbHMvcmVtb3ZlX2xhc3Rfc2xhc2gudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJyZW1vdmVMYXN0U2xhc2hcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfcmVtb3ZlX2xhc3Rfc2xhc2hfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcInJlbW92ZUxhc3RTbGFzaFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbG9hZF9zY3JpcHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbG9hZF9zY3JpcHQgKi8gXCIuL3dpZGdldC91dGlscy9sb2FkX3NjcmlwdC50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImxvYWRTY3JpcHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfbG9hZF9zY3JpcHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcImxvYWRTY3JpcHRcIl07IH0pO1xuXG5cblxuXG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3dpZGdldC91dGlscy9sb2FkX3NjcmlwdC50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3dpZGdldC91dGlscy9sb2FkX3NjcmlwdC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBsb2FkU2NyaXB0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImxvYWRTY3JpcHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBsb2FkU2NyaXB0OyB9KTtcbmNvbnN0IGxvYWRTY3JpcHQgPSAoc3JjKSA9PiB7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNyYyA9IHNyYztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICBzY3JpcHQub25sb2FkID0gcmVzO1xuICAgICAgICBzY3JpcHQub25lcnJvciA9IHJlajtcbiAgICB9KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi93aWRnZXQvdXRpbHMvcmVtb3ZlX2xhc3Rfc2xhc2gudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi93aWRnZXQvdXRpbHMvcmVtb3ZlX2xhc3Rfc2xhc2gudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogcmVtb3ZlTGFzdFNsYXNoICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcInJlbW92ZUxhc3RTbGFzaFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHJlbW92ZUxhc3RTbGFzaDsgfSk7XG5jb25zdCByZW1vdmVMYXN0U2xhc2ggPSAodXJsKSA9PiB7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gdXJsLmxlbmd0aCAtIDE7XG4gICAgaWYgKHVybFtsYXN0SW5kZXhdID09PSBcIi9cIikge1xuICAgICAgICB1cmwgPSB1cmwuc3Vic3RyKGxhc3RJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG59O1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2lkZ2V0LmNvbW1vbmpzMi5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9